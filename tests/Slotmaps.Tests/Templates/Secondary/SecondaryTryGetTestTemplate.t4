<#@ template hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#
    var varName = char.ToLower(slotMapType[0]) + slotMapType.Substring(1);
#>
<#@ include file="..\TestData.t4" #>
<#@ include file="..\Header.t4" #>

namespace Slotmaps.Tests.<#= slotMapType #>;
public class TryGet
{
<#
foreach (var data in dataTypes)
{
    var typeTitle = NullableString(char.ToUpper(data.Key[0]) + data.Key.Substring(1));
#>
    //////////////////////////////////////////////////////////////////////////////////////////
    //<#= CenteredString(data.Key) #>//
    //////////////////////////////////////////////////////////////////////////////////////////

    [Fact]
    public void <#= typeTitle #>WithValidKey_ReturnsTrueAndValue()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key = new SlotKey(1, 1);
        <#= varName #>.Insert(key, <#= data.Value[0] #>);

        bool result = <#= varName #>.TryGet(key, out var value);

        Assert.True(result);
        Assert.Equal(<#= data.Value[0] #>, value);
    }

    [Fact]
    public void <#= typeTitle #>WithInvalidKey_ReturnsFalseAndDefault()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var invalidKey = new SlotKey(-1, 0);

        bool result = <#= varName #>.TryGet(invalidKey, out var value);

        Assert.False(result);
        Assert.Equal(default, value);
    }

    [Fact]
    public void <#= typeTitle #>WithKeyNotFound_ReturnsFalseAndDefault()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key = new SlotKey(1, 1);

        bool result = <#= varName #>.TryGet(key, out var value);

        Assert.False(result);
        Assert.Equal(default, value);
    }

    [Fact]
    public void <#= typeTitle #>WithOlderVersionKey_ReturnsFalseAndDefault()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key1 = new SlotKey(1, 2);
        var key2 = new SlotKey(1, 1);
        <#= varName #>.Insert(key1, <#= data.Value[0] #>);

        bool result = <#= varName #>.TryGet(key2, out var value);

        Assert.False(result);
        Assert.Equal(default, value);
    }

    [Fact]
    public void <#= typeTitle #>WithNewerVersionKey_ReturnsFalseAndDefault()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key1 = new SlotKey(1, 1);
        var key2 = new SlotKey(1, 2);
        <#= varName #>.Insert(key1, <#= data.Value[0] #>);

        bool result = <#= varName #>.TryGet(key2, out var value);

        Assert.False(result);
        Assert.Equal(default, value);
    }

<#
}
#>
}