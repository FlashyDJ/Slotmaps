<#@ template hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#
    var varName = char.ToLower(slotMapType[0]) + slotMapType.Substring(1);
#>
<#@ include file="..\TestData.t4" #>
<#@ include file="..\Header.t4" #>

namespace Slotmaps.Tests.<#= slotMapType #>;
public class TryInsert
{
<#
foreach (var data in dataTypes)
{
    var typeTitle = NullableString(char.ToUpper(data.Key[0]) + data.Key.Substring(1));
#>
    //////////////////////////////////////////////////////////////////////////////////////////
    //<#= CenteredString(data.Key) #>//
    //////////////////////////////////////////////////////////////////////////////////////////

    [Fact]
    public void <#= typeTitle #>WithValidKey_ReturnsTrueAndInsertedValue()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key = new SlotKey(1, 1);

        bool result = <#= varName #>.TryInsert(key, <#= data.Value[0] #>, out var previousValue);

        Assert.True(result);
        <#= data.Key.EndsWith("?") ? "Assert.Null(previousValue);" : $"Assert.Equal({data.Value[0]}, previousValue);" #>
    }

    [Fact]
    public void <#= typeTitle #>WithInvalidKey_ReturnsFalseAndDefaultPreviousValue()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var invalidKey = new SlotKey(-1, 0);

        bool result = <#= varName #>.TryInsert(invalidKey, <#= data.Value[0] #>, out var previousValue);

        Assert.False(result);
        Assert.Equal(default, previousValue);
    }

    [Fact]
    public void <#= typeTitle #>WithOlderVersionKey_ReturnsFalseAndDefaultPreviousValue()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key1 = new SlotKey(1, 2);
        var key2 = new SlotKey(1, 1);

        <#= varName #>.TryInsert(key1, <#= data.Value[0] #>, out var _);

        bool result = <#= varName #>.TryInsert(key2, <#= data.Value[1] #>, out var previousValue);
        Assert.False(result);
        Assert.Equal(default, previousValue);
    }

    [Fact]
    public void <#= typeTitle #>WithSameKey_ReturnsTrueAndPreviousValue()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key = new SlotKey(1, 1);

        <#= varName #>.TryInsert(key, <#= data.Value[0] #>, out var previousValue1);
        bool result = <#= varName #>.TryInsert(key, <#= data.Value[1] #>, out var previousValue2);

        Assert.True(result);
        <#= data.Key.EndsWith("?") ? "Assert.Null(previousValue1);" : $"Assert.Equal({data.Value[0]}, previousValue1);" #>
        <#= data.Key.EndsWith("?") ? "Assert.Null(previousValue2);" : $"Assert.Equal({data.Value[0]}, previousValue2);" #>
    }

    [Fact]
    public void <#= typeTitle #>WithValidValues_CountIncrementsOnInsertion()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key1 = new SlotKey(1, 1);
        var key2 = new SlotKey(2, 1);

        <#= varName #>.TryInsert(key1, <#= data.Value[0] #>, out _);

        Assert.Single(<#= varName #>);

        <#= varName #>.TryInsert(key2, <#= data.Value[1] #>, out _);

        Assert.Equal(2, <#= varName #>.Count);
        <#= data.Key.EndsWith("?") ? "Assert.Null(" : $"Assert.Equal({data.Value[0]}, " #><#= varName #>[key1]);
        Assert.Equal(<#= data.Value[1] #>, <#= varName #>[key2]);
    }

<#
}
#>
}