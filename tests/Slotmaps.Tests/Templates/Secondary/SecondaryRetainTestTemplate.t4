<#@ template hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#
    var varName = char.ToLower(slotMapType[0]) + slotMapType.Substring(1);
#>
<#@ include file="..\TestData.t4" #>
<#@ include file="..\Header.t4" #>

namespace Slotmaps.Tests.<#= slotMapType #>;

public class Retain
{
    [Fact]
    public void PredicateRemovesSomeItems_ItemsThatSatisfyPredicateAreRetained()
    {
        var <#= varName #> = new <#= slotMapType #><int>();
        var key1 = new SlotKey(1, 1);
        var key2 = new SlotKey(2, 1);
        var key3 = new SlotKey(3, 1);
        var key4 = new SlotKey(4, 1);
        var key5 = new SlotKey(5, 1);
        <#= varName #>.Insert(key1, 42);
        <#= varName #>.Insert(key2, 24);
        <#= varName #>.Insert(key3, 36);
        <#= varName #>.Insert(key4, 50);
        <#= varName #>.Insert(key5, 18);

        <#= varName #>.Retain((key, value) => value > 30);

        Assert.Equal(3, <#= varName #>.Count);
        Assert.Equal(42, <#= varName #>[key1]);
        Assert.Equal(36, <#= varName #>[key3]);
        Assert.Equal(50, <#= varName #>[key4]);
        Assert.False(<#= varName #>.ContainsKey(key2));
        Assert.False(<#= varName #>.ContainsKey(key5));
    }

<#
foreach (var data in dataTypes)
{
    var typeTitle = NullableString(char.ToUpper(data.Key[0]) + data.Key.Substring(1));
#>
    //////////////////////////////////////////////////////////////////////////////////////////
    //<#= CenteredString(data.Key) #>//
    //////////////////////////////////////////////////////////////////////////////////////////

    [Fact]
    public void PredicateRemovesAll<#= typeTitle #>Items_NoItemsRetained()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key1 = new SlotKey(1, 1);
        var key2 = new SlotKey(2, 1);
        var key3 = new SlotKey(3, 1);
        var key4 = new SlotKey(4, 1);
        var key5 = new SlotKey(5, 1);
        <#= varName #>.Insert(key1, <#= data.Value[0] #>);
        <#= varName #>.Insert(key2, <#= data.Value[1] #>);
        <#= varName #>.Insert(key3, <#= data.Value[2] #>);
        <#= varName #>.Insert(key4, <#= data.Value[3] #>);
        <#= varName #>.Insert(key5, <#= data.Value[4] #>);

        <#= varName #>.Retain((key, value) => value == <#= data.Value[5] #>);

        Assert.Empty(<#= varName #>);
    }

    [Fact]
    public void PredicateKeepsAll<#= typeTitle #>Items_ItemsRetained()
    {
        var <#= varName #> = new <#= slotMapType #><<#= data.Key #>>();
        var key1 = new SlotKey(1, 1);
        var key2 = new SlotKey(2, 1);
        var key3 = new SlotKey(3, 1);
        var key4 = new SlotKey(4, 1);
        var key5 = new SlotKey(5, 1);
        <#= varName #>.Insert(key1, <#= data.Value[0] #>);
        <#= varName #>.Insert(key2, <#= data.Value[1] #>);
        <#= varName #>.Insert(key3, <#= data.Value[2] #>);
        <#= varName #>.Insert(key4, <#= data.Value[3] #>);
        <#= varName #>.Insert(key5, <#= data.Value[4] #>);

        <#= varName #>.Retain((key, value) => value != <#= data.Value[5] #>);

        Assert.Equal(5, <#= varName #>.Count);
    }
<#
}
#>
}