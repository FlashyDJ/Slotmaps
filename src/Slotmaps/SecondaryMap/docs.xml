<?xml version="1.0" encoding="utf-8" ?>
<docs>
  <SecondaryMapD>
    <summary>
      Represents a secondary slot map that associates keys of type <see cref="SlotKey"/> for efficiently
      storing additional information for primary slot map elements.
    </summary>
    <typeparam name="TValue">The type of values stored in the secondary map.</typeparam>
    <remarks>
      <para>
        The <see cref="SecondaryMap{TValue}"/> class allows you to efficiently store additional 
        information for each element in a primary slot map. You can have multiple secondary maps
        associated with a single primary slot map. However, using keys from multiple different primary
        slot maps within the same secondary map may result in safe but unspecified behavior.
      </para>
      <para>
        It's important to note that the <see cref="SecondaryMap{TValue}"/> doesn't provide keys;
        you need to provide it keys generated by a primary map like <see cref="SlotMap{TValue}"/>.
        This means that, even if you associate data with only a single element from the primary slot map,
        you may need to initialize memory equivalent to the original primary slot map's size.
      </para>
      <para>
        If you require a custom key type, consider using the more generic <see cref="SecondaryMap{TKey, TValue}"/>
        class where you can specify your own key type implementing <see cref="ISlotKey{TKey}"/>.
      </para>
      <para>
        You may consider using a <see cref="SparseSecondaryMap{TValue}"/> if you expect to store
        associated data for only a small portion of the primary slot map. The primary difference between
        the two is in how they allocate memory. <see cref="SecondaryMap{TValue}"/> uses an array, 
        which allocates memory for all slots up to the specified index when you pass a key, even if you
        didn't provide data for indices before it. In contrast, <see cref="SparseSecondaryMap{TValue}"/>
        uses a Dictionary and only allocates memory for the specific index provided.
      </para>
    </remarks>
    <seealso cref="SlotKey"/>
    <seealso cref="SecondaryMap{TKey,TValue}"/>
    <seealso cref="SparseSecondaryMap{TValue}"/>
  </SecondaryMapD>

  <Ctor1D>
    <summary>
      Initializes a new instance of the <see cref="SecondaryMap{TValue}"/> class that is empty with no
      initial capacity.
    </summary>
  </Ctor1D>

  <Ctor2D>
    <summary>
      Initializes a new instance of the <see cref="SecondaryMap{TValue}"/> class with the specified capacity.
    </summary>
    <param name="capacity">The initial capacity of the secondary map. Must be a non-negative integer.</param>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
    <seealso cref="Capacity"/>
  </Ctor2D>

  <SecondaryMap>
    <summary>
      Represents a secondary slot map that associates keys of type <typeparamref name="TKey"/> for efficiently
      storing additional information for primary slot map elements.
    </summary>
    <typeparam name="TKey">The type of keys that implement <see cref="ISlotKey{TKey}"/>.</typeparam>
    <typeparam name="TValue">The type of values stored in the secondary map.</typeparam>
    <remarks>
      <para>
        The <see cref="SecondaryMap{TKey, TValue}"/> class allows you to efficiently store additional 
        information for each element in a primary slot map. You can have multiple secondary maps
        associated with a single primary slot map. However, using keys from multiple different primary
        slot maps within the same secondary map may result in safe but unspecified behavior.
      </para>
      <para>
        It's important to note that the <see cref="SecondaryMap{TKey, TValue}"/> doesn't provide keys;
        you need to provide it keys generated by a primary map like <see cref="SlotMap{TKey, TValue}"/>.
        This means that, even if you associate data with only a single element from the primary slot map,
        you may need to initialize memory equivalent to the original primary slot map's size.
      </para>
      <para>
        If you don't require a custom key type, you can use <see cref="SecondaryMap{TValue}"/>. This class
        automatically sets the key type to <see cref="SlotKey"/>, simplifying slot-based key management
        and allowing you to focus on value association and efficient data management.
      </para>
      <para>
        You may consider using a <see cref="SparseSecondaryMap{TKey, TValue}"/> if you expect to store
        associated data for only a small portion of the primary slot map. The primary difference between
        the two is in how they allocate memory. <see cref="SecondaryMap{TKey, TValue}"/> uses an array, 
        which allocates memory for all slots up to the specified index when you pass a key, even if you
        didn't provide data for indices before it. In contrast, <see cref="SparseSecondaryMap{TKey, TValue}"/>
        uses a Dictionary and only allocates memory for the specific index provided.
      </para>
    </remarks>
    <seealso cref="ISlotKey{TKey}"/>
    <seealso cref="SecondaryMap{TValue}"/>
    <seealso cref="SparseSecondaryMap{TKey,TValue}"/>
  </SecondaryMap>

  <Ctor1>
    <summary>
      Initializes a new instance of the <see cref="SecondaryMap{TKey,TValue}"/> class that is empty with no
      initial capacity.
    </summary>
  </Ctor1>

  <Ctor2>
    <summary>
      Initializes a new instance of the <see cref="SecondaryMap{TKey,TValue}"/> class with the specified capacity.
    </summary>
    <param name="capacity">The initial capacity of the secondary map. Must be a non-negative integer.</param>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
    <seealso cref="Capacity"/>
  </Ctor2>

  <Capacity>
    <summary>
      Gets the capacity of the secondary map.
    </summary>
    <remarks>
      The capacity represents the maximum number of elements that the secondary map can hold before it needs to
      resize its internal storage.
    </remarks>
    <seealso cref="EnsureCapacity"/>
  </Capacity>

  <Count>
    <summary>
      Gets the number of elements currently stored in the secondary map.
    </summary>
  </Count>

  <IsEmpty>
    <summary>
      Indicates whether the secondary map is empty.
    </summary>
    <remarks>
      The <c>IsEmpty</c> property returns <see langword="true"/> if the secondary map contains no elements,
      and <see langword="false"/> otherwise.
    </remarks>
    <seealso cref="Count"/>
  </IsEmpty>

  <Keys>
    <summary>
      Gets a collection of keys associated with the values in the secondary map.
    </summary>
    <remarks>
      The <c>Keys</c> property returns a <see cref="SlotKeyCollection"/> that provides a read-only
      collection of keys associated with the values in the secondary map. Use this collection to
      enumerate, search, or perform operations on the keys within the secondary map.
    </remarks>
    <seealso cref="SlotKeyCollection"/>
  </Keys>

  <Values>
    <summary>
      Gets a collection of values stored in the secondary map.
    </summary>
    <remarks>
      The <C>Values</C> property returns a <see cref="SlotValueCollection"/> that
      provides a read-only collection of values stored in the secondary map. Use this collection to
      enumerate, search, or perform operations on the values within the secondary map.
    </remarks>
    <seealso cref="SlotValueCollection"/>
  </Values>

  <Indexer>
    <summary>
      Gets or sets the value associated with the specified key.
    </summary>
    <param name="key">The key to retrieve or set the value for.</param>
    <value>The value associated with the specified key.</value>
    <remarks>
      The Indexer provides a convenient way to access and set values in the secondary map using their associated
      keys. To retrieve a value, provide the key as an indexer. To set a value, use an assignment operation.
    </remarks>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the secondary map.
    </exception>
  </Indexer>

  <ContainsKey>
    <summary>
      Determines whether the slot map contains a key that matches the specified <paramref name="key"/>.
    </summary>
    <param name="key">The key to search for in the secondary map.</param>
    <remarks>
      The <c>ContainsKey</c> method checks whether the secondary map contains a key that matches
      the provided <paramref name="key"/>. To be considered a match, the entry must have the
      same index and version as the provided <paramref name="key"/>.
    </remarks>
    <returns>
      <see langword="true"/> if the secondary map contains the specified key; otherwise, <see langword="false"/>.
    </returns>
    <seealso cref="TryGet"/>
  </ContainsKey>

  <ContainsValue>
    <summary>
      Determines whether the secondary map contains a value that matches the specified <paramref name="value"/>.
    </summary>
    <param name="value">The value to search for in the secondary map.</param>
    <remarks>
      <para>
        The <c>ContainsValue</c>" method checks whether the secondary map contains a value that matches
        the provided <paramref name="value"/>. It iterates through the slots, searching for an occupied
        slot with a value that equals the specified value using the default equality comparer.
      </para>
      <para>
        If <paramref name="value"/> is <see langword="null"/>, the method returns <see langword="false"/>
        since it cannot match a <see langword="null"/> value.
      </para>
    </remarks>
    <returns>
      <see langword="true"/> if the secondary map contains the specified value; otherwise, <see langword="false"/>.
    </returns>
    <seealso cref="TryGet"/>
  </ContainsValue>

  <Clear>
    <summary>
      Removes all values from the secondary map, resetting it to an empty state.
    </summary>
    <remarks>
      The <c>Clear</c> method removes all keys and values from the secondary map, effectively resetting it
      to an empty state. If the secondary map contains any items, this method clears the internal slots array and
      resets the count and free head to zero, but it does not deallocate memory.
    </remarks>
  </Clear>

  <Drain>
    <summary>
      Empties the secondary map by returning key-value pairs one by one while leaving the remaining items
      in the map.
    </summary>
    <remarks>
      The <c>Drain</c> method returns an enumerable sequence of key-value pairs stored in the secondary map
      one by one, allowing you to process or stop processing at any point while the remaining items remain
      in the secondary map.
    </remarks>
    <returns>
      An enumerable sequence of key-value pairs drained from the secondary map.
    </returns>
    <seealso cref="Clear"/>
    <seealso cref="Retain"/>
  </Drain>

  <EnsureCapacity>
    <summary>
      Ensures that the secondary map can hold at least the specified capacity without resizing.
    </summary>
    <param name="capacity">The desired capacity. Must be a non-negative integer.</param>
    <remarks>
      The <c>EnsureCapacity</c> method ensures that the secondary map can hold at least the specified
      <paramref name="capacity"/> without resizing its internal storage. If the current capacity is less
      than the specified <paramref name="capacity"/>, the method will resize the internal storage to meet
      or exceed the desired capacity.
    </remarks>
    <returns>The actual capacity of the secondary map after ensuring it meets the specified capacity.</returns>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
    <seealso cref="Capacity"/>
    <seealso cref="Reserve"/>
    <seealso cref="Resize"/>
  </EnsureCapacity>

  <Get>
    <summary>
      Gets the value associated with the specified key in the secondary map.
    </summary>
    <param name="key">The key to retrieve the value for.</param>
    <remarks>
      The <c>Get</c> method retrieves the value associated with the specified key in the secondary map.
      If the key is not found in the secondary map, it throws a <see cref="KeyNotFoundException"/>.
    </remarks>
    <returns>The value associated with the specified key.</returns>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the secondary map.
    </exception>
    <seealso cref="TryGet"/>
  </Get>

  <Insert>
    <summary>
      Inserts or updates a value associated with the specified key in the secondary map.
    </summary>
    <param name="key">The key to insert or update the value for.</param>
    <param name="value">The value to insert or update.</param>
    <remarks>
      The <c>Insert</c> method inserts or updates a value associated with the specified <paramref name="key"/>
      in the secondary map. It verifies the existence of the key, updates the value, and increments the version
      of the slot.
    </remarks>
    <returns>
      The updated key after the insertion or update with an incremented version number.
    </returns>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="value"/> is <c>null</c>.
    </exception>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the secondary map.
    </exception>
    <seealso cref="TryInsert"/>
  </Insert>

  <Remove>
    <summary>
      Removes the value associated with the specified key from the secondary map.
    </summary>
    <param name="key">The key to remove from the secondary map.</param>
    <remarks>
      The <c>Remove</c> method removes the value associated with the specified <paramref name="key"/>
      from the secondary map. It verifies the existence of the key, clears the value, updates the slot's next free
      index, increments the version of the slot, and updates the count. After removal, the slot corresponding
      to the <paramref name="key"/> is marked as free for future use.
    </remarks>
    <returns>The removed value.</returns>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the secondary map.
    </exception>
    <seealso cref="TryRemove"/>
  </Remove>

  <Reserve>
    <summary>
      Ensures that the secondary map has enough additional capacity to accommodate the specified number of elements.
    </summary>
    <param name="additionalSize">The additional capacity to reserve. Must be a positive integer.</param>
    <remarks>
      The <c>Reserve</c> method ensures that the secondary map has enough additional capacity to accommodate
      the specified number of elements. If the remaining available capacity is less than <paramref name="additionalSize"/>,
      it resizes the internal slots array to increase the capacity.
    </remarks>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="additionalSize"/> is negative or zero.
    </exception>
    <seealso cref="Capacity"/>
    <seealso cref="EnsureCapacity"/>
    <seealso cref="Resize"/>
  </Reserve>

  <Resize>
    <summary>
      Resizes the secondary map to the specified new size.
    </summary>
    <param name="newSize">
      The new size for the secondary map. Must be greater than or equal to the current capacity.
    </param>
    <remarks>
      The <c>Resize</c> method resizes the secondary map to the specified new size while preserving existing
      elements. If <paramref name="newSize"/> is equal to the current capacity, the method has no effect. If
      <paramref name="newSize"/> is greater than the current capacity, it increases the capacity. If
      <paramref name="newSize"/> is less than the current capacity, the method throws an 
      <see cref="ArgumentOutOfRangeException"/>.
    </remarks>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="newSize"/> is less than the current capacity.
    </exception>
    <seealso cref="EnsureCapacity"/>
    <seealso cref="Reserve"/>
  </Resize>

  <Retain>
    <summary>
      Retains elements in the secondary map based on a specified predicate.
    </summary>
    <param name="predicate">
      A function that defines whether to retain or remove an element based on its key and value.
    </param>
    <remarks>
      The <c>Retain</c> method iterates through the elements in the secondary map and retains those for which the
      specified <paramref name="predicate"/> function returns <see langword="true"/>. It removes elements for
      which the predicate returns <see langword="false"/>. This method is useful for filtering elements based
      on custom criteria.
    </remarks>
    <seealso cref="Drain"/>
    <seealso cref="Remove"/>
    <seealso cref="TryRemove"/>
  </Retain>

  <TryGet>
    <summary>
      Tries to retrieve the value associated with the specified key from the secondary map.
    </summary>
    <param name="key">The key to retrieve the value for.</param>
    <param name="value">
      When this method returns, contains the value associated with the specified key if found; otherwise,
      the default value.
    </param>
    <remarks>
      The <c>TryGet</c> method tries to retrieve the value associated with the specified <paramref name="key"/>
      from the secondary map. If the key is not found in the secondary map, the method returns <see langword="false"/>,
      and <paramref name="value"/> is set to the default value for the value type. If the value is found,
      <see langword="true"/> is returned, and <paramref name="value"/> contains the retrieved value.
    </remarks>
    <returns>
      <see langword="true"/> if the value associated with the specified key was found; otherwise, <see langword="false"/>.
    </returns>
    <seealso cref="Get"/>
  </TryGet>

  <TryInsert>
    <summary>
      Tries to insert or update a value associated with the specified key in the secondary map.
    </summary>
    <param name="key">The key to insert or update the value for.</param>
    <param name="value">The value to insert or update.</param>
    <param name="oldValue">
      When this method returns, contains the old value if insertion or update was successful.
    </param>
    <remarks>
      The <c>TryInsert</c> method tries to insert or update a value associated with the specified 
      <paramref name="key"/> in the secondary map. If the key is not found in the secondary map, the method returns
      <see langword="false"/>, and <paramref name="oldValue"/> is set to <see langword="default"/>.
      If the insertion or update was successful, <see langword="true"/> is returned, and <paramref name="oldValue"/>
      contains the old value.
    </remarks>
    <returns>
      <see langword="true"/> if insertion or update was successful; otherwise, <see langword="false"/>.
    </returns>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="value"/> is <c>null</c>.
    </exception>
    <seealso cref="Insert"/>
  </TryInsert>

  <TryRemove>
    <summary>
      Tries to remove the value associated with the specified key from the secondary map.
    </summary>
    <param name="key">The key to remove from the secondary map.</param>
    <param name="value">
      When this method returns, contains the value associated with the removed key if found; otherwise,
      the default value.
    </param>
    <remarks>
      The <c>TryRemove</c> method tries to remove the value associated with the specified <paramref name="key"/>
      from the secondary map. If the key is not found in the secondary map, the method returns <see langword="false"/>, and
      <paramref name="value"/> is set to the default value for the value type. If the value is found and removed,
      <see langword="true"/> is returned, and <paramref name="value"/> contains the removed value.
    </remarks>
    <returns>
      <see langword="true"/> if the value associated with the specified key was found and removed; otherwise,
      <see langword="false"/>.
    </returns>
    <seealso cref="Remove"/>
  </TryRemove>

  <Enumerator>
    <summary>
      Represents an enumerator for the <see cref="SecondaryMap{TValue}"/> collection.
    </summary>
    <remarks>
      <para>
        The <c>Enumerator</c> struct provides an enumerator for iterating through the elements of the <see cref="SecondaryMap{TValue}"/> collection.
        It allows sequential access to the key-value pairs within the map.
      </para>
      <para>
        You can use this enumerator to iterate through the elements in the <see cref="SecondaryMap{TValue}"/> using a <c>foreach</c> loop.
      </para>
    </remarks>
  </Enumerator>

  <SlotKeyCollection>
    <summary>
      Represents a collection of <see cref="SlotKey"/> instances associated with a <see cref="SecondaryMap{TValue}"/>.
    </summary>
    <remarks>
      The <see cref="SlotMap{TValue}.SlotKeyCollection"/> class provides a collection of <c>SlotKey</c> instances that are associated with a <see cref="SecondaryMap{TValue}"/>.
      This collection allows you to enumerate and work with the keys present in the <see cref="SecondaryMap{TValue}"/>.
    </remarks>
  </SlotKeyCollection>

  <SKCCtor>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TValue}.SlotKeyCollection"/> class with a reference to the parent <see cref="SecondaryMap{TValue}"/>.
    </summary>
    <param name="secondaryMap">
      The <see cref="SecondaryMap{TValue}"/> to which this collection is associated.
    </param>
    <remarks>
      Use this constructor to create a new <see cref="SlotMap{TValue}.SlotKeyCollection"/> that is associated with a specific <see cref="SecondaryMap{TValue}"/>.
      The <paramref name="secondaryMap"/> parameter represents the parent <see cref="SecondaryMap{TValue}"/> to which this collection is linked.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="secondaryMap"/> is null.
    </exception>
  </SKCCtor>

  <SKCCount>
    <summary>
      Gets the number of elements in the <see cref="SlotMap{TValue}.SlotKeyCollection"/>.
    </summary>
    <remarks>
      This count corresponds to the number of keys associated with the <see cref="SecondaryMap{TValue}"/> that this collection belongs to.
    </remarks>
  </SKCCount>

  <SKCContains>
    <summary>
      Determines whether the <see cref="SlotMap{TValue}.SlotKeyCollection"/> contains a specific <see cref="SlotKey"/>.
    </summary>
    <param name="key">
      The <see cref="SlotKey"/> to locate in the collection.
    </param>
    <remarks>
      Use this method to check whether the <see cref="SlotMap{TValue}.SlotKeyCollection"/> contains a specific <c>SlotKey</c> instance.
    </remarks>
    <returns>
      <see langword="true"/> if the <see cref="SlotMap{TValue}.SlotKeyCollection"/> contains the specified <paramref name="key"/>; otherwise, <see langword="false"/>.
    </returns>
  </SKCContains>

  <SKCCopyTo>
    <summary>
      Copies the elements of the <see cref="SlotMap{TValue}.SlotKeyCollection"/> to an array, starting at the specified index.
    </summary>
    <param name="array">
      The one-dimensional array that is the destination of the elements copied from the <see cref="SlotMap{TValue}.SlotKeyCollection"/>. Must not be null.
    </param>
    <param name="index">
      The zero-based index in <paramref name="array"/> at which copying begins.
    </param>
    <remarks>
      The <c>CopyTo</c> method copies the elements of the <see cref="SlotMap{TValue}.SlotKeyCollection"/> to a one-dimensional array, starting at the specified index in the destination array.
      The destination array must have enough space to accommodate the elements to be copied.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="array"/> is null.
    </exception>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="index"/> is negative, greater than or equal to the length of <paramref name="array"/>, or if there are not enough elements in the <see cref="SlotMap{TValue}.SlotKeyCollection"/> to fill the destination array starting at the specified index.
    </exception>
  </SKCCopyTo>

  <SKCEnumerator>
    <summary>
      Represents an enumerator for the <see cref="SlotKeyCollection"/>.
    </summary>
    <remarks>
      The <c>Enumerator</c> struct allows you to enumerate the <c>SlotKey</c> instances in the <see cref="SlotKeyCollection"/>.
      Use this enumerator to iterate over the keys in the collection.
    </remarks>
  </SKCEnumerator>

  <SlotValueCollection>
    <summary>
      Represents a collection of values associated with a <see cref="SecondaryMap{TValue}"/>.
    </summary>
    <remarks>
      The <see cref="SlotMap{TValue}.SlotValueCollection"/> class provides a collection of values that are associated with a <see cref="SecondaryMap{TValue}"/>.
      This collection allows you to enumerate and work with the values present in the <see cref="SecondaryMap{TValue}"/>.
    </remarks>
  </SlotValueCollection>

  <SVCCtor>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TValue}.SlotValueCollection"/> class associated with a <see cref="SecondaryMap{TValue}"/>.
    </summary>
    <param name="secondaryMap">
      The <see cref="SecondaryMap{TValue}"/> with which this collection is associated. Must not be null.
    </param>
    <remarks>
      The constructor initializes a new instance of the <see cref="SlotMap{TValue}.SlotValueCollection"/> class that is associated with a specific <see cref="SecondaryMap{TValue}"/>.
      The <paramref name="secondaryMap"/> parameter determines the <see cref="SecondaryMap{TValue}"/> with which this collection is associated.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="secondaryMap"/> is null.
    </exception>
  </SVCCtor>

  <SVCCount>
    <summary>
      Gets the number of values in the <see cref="SlotMap{TValue}.SlotValueCollection"/>.
    </summary>
    <remarks>
      This count corresponds to the number of values associated with the <see cref="SecondaryMap{TValue}"/> that this collection belongs to.
    </remarks>
  </SVCCount>

  <SVCContains>
    <summary>
      Determines whether the <see cref="SlotMap{TValue}.SlotValueCollection"/> contains a specific value.
    </summary>
    <param name="value">The value to locate in the collection.</param>
    <remarks>
      Use this method to check whether the <see cref="SlotMap{TValue}.SlotKeyCollection"/> contains a specific value.
    </remarks>
    <returns>
      <see langword="true"/> if the <see cref="SlotMap{TValue}.SlotValueCollection"/> contains the specified value; otherwise, <see langword="false"/>.
    </returns>
  </SVCContains>

  <SVCCopyTo>
    <summary>
      Copies the elements of the <see cref="SlotMap{TValue}.SlotValueCollection"/> to an array, starting at the specified index.
    </summary>
    <param name="array">
      The one-dimensional array that is the destination of the elements copied from the <see cref="SlotMap{TValue}.SlotValueCollection"/>. Must not be null.
    </param>
    <param name="index">
      The zero-based index in <paramref name="array"/> at which copying begins.
    </param>
    <remarks>
      The <c>CopyTo</c> method copies the elements of the <see cref="SlotMap{TValue}.SlotValueCollection"/> to a one-dimensional array, starting at the specified index in the destination array.
      The destination array must have enough space to accommodate the elements to be copied.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="array"/> is null.
    </exception>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="index"/> is negative, greater than or equal to the length of <paramref name="array"/>, or if there are not enough elements in the <see cref="SlotMap{TValue}.SlotValueCollection"/> to fill the destination array starting at the specified index.
    </exception>
  </SVCCopyTo>

  <SVCEnumerator>
    <summary>
      Represents an enumerator for the values in the <see cref="SlotMap{TValue}.SlotValueCollection"/>.
    </summary>
    <remarks>
      The <c>Enumerator</c> struct allows you to enumerate the values stored in the <see cref="SlotValueCollection"/>.
      Use this enumerator to iterate over the values in the collection.
    </remarks>
  </SVCEnumerator>
</docs>