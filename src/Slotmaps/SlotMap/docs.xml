<?xml version="1.0" encoding="utf-8"?>
<docs>
  <SlotMapD>
    <summary>
      Represents a slot map data structure that associates keys of type <see cref="SlotKey"/>
      with values of type <typeparamref name="TValue"/>.
    </summary>
    <typeparam name="TValue">The type of values stored in the slot map.</typeparam>
    <remarks>
      <para>
        The <see cref="SlotMap{TValue}"/> class is a versatile data structure designed for
        efficient association of keys with values. It is particularly useful when you need to manage
        a large number of items with a stable key-value relationship with the default key type of 
        <see cref="SlotKey"/>. 
      </para>
      <para>
        The slot map optimizes memory usage by storing values in an array of slots and associating each
        value with a key. It also manages slot reuse and reallocation to ensure efficient storage.
      </para>
      <para>
        If you require a custom key type, consider using the more generic <see cref="SlotMap{TKey, TValue}"/>
        class where you can specify your own key type implementing <see cref="ISlotKey{TKey}"/>.
      </para>
    </remarks>
    <seealso cref="SlotMap{TKey, TValue}"/>
  </SlotMapD>

  <SlotMapDCtor1>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TValue}"/> class that is empty with no initial capacity.
    </summary>
  </SlotMapDCtor1>

  <SlotMapDCtor2>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TValue}"/> class with
      the specified capacity.
    </summary>
    <param name="capacity">The initial capacity of the slot map. Must be a non-negative integer.</param>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
  </SlotMapDCtor2>

  <SlotKeyCollection>
    <summary>
      Represents a collection of keys associated with a value in the slot map.
    </summary>
    <remarks>
      The <see cref="SlotKeyCollection"/> class represents a collection of key instances that are associated with 
      a value from the slot map. This collection allows you to iterate and work with the keys contained 
      within the slot map.
    </remarks>
  </SlotKeyCollection>

  <SKCCtor>
    <summary>
      Initializes a new instance of the <see cref="SlotKeyCollection"/> class with a reference to the parent
      slot map.
    </summary>
    <param name="slotMap">
      The slot map to associate with this key collection. Must not be null.
    </param>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="slotMap"/> is null.
    </exception>
  </SKCCtor>

  <SKCCount>
    <summary>
      Gets the number of keys in the collection.
    </summary>
  </SKCCount>

  <SKCContains>
    <summary>
      Determines whether the collection contains a specific key.
    </summary>
    <param name="key">The key to search for in the collection.</param>
    <remarks>
      The <c>Contains</c> method checks whether the collection contains a key that matches the provided
      <paramref name="key"/>. It verifies both the existence of the key and its associated version in the
      collection to ensure consistency.
    </remarks>
    <returns>
      <see langword="true"/> if the slot map contains the specified key; otherwise, <see langword="false"/>.
    </returns>
  </SKCContains>

  <SKCCopyTo>
    <summary>
      Copies the elements of the key collection to an array, starting at the specified index.
    </summary>
    <param name="array">The destination array where keys will be copied.</param>
    <param name="index">The zero-based index in the array at which copying begins.</param>
    <remarks>
      The <c>CopyTo</c> method copies the keys from the key collection to the specified <paramref name="array"/>.
      The copying starts at the specified <paramref name="index"/> in the destination array.
      The destination array must have enough space to accommodate the elements to be copied.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="array"/> is null.
    </exception>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="index"/> is negative, greater than or equal to the length of <paramref name="array"/>,
      or if there are not enough elements in the slot map to fill the destination array starting at the specified index.
    </exception>
  </SKCCopyTo>

  <SKCEnumerator>
    <summary>
      Represents an enumerator for the keys in the <see cref="SlotKeyCollection"/>.
    </summary>
    <remarks>
      The <see cref="Enumerator"/> struct represents an enumerator for keys in the <see cref="SlotKeyCollection"/>.
      It allows you to iterate through the keys in the collection.
    </remarks>
  </SKCEnumerator>

  <SlotValueCollection>
    <summary>
      Represents a collection of values in a slot map.
    </summary>
    <remarks>
      The <see cref="SlotValueCollection"/> class represents a collection of values in a slot map.
      This collection allows you to iterate and work with the values contained within the slot map.
    </remarks>
  </SlotValueCollection>

  <SVCCtor>
    <summary>
      Initializes a new instance of the <see cref="SlotValueCollection"/> class with a reference to the parent
      slot map.
    </summary>
    <param name="slotMap">
      The slot map to associate with this value collection. Must not be null.
    </param>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="slotMap"/> is null.
    </exception>
  </SVCCtor>

  <SVCCount>
    <summary>
      Gets the number of values in the collection.
    </summary>
  </SVCCount>

  <SVCContains>
    <summary>
      Determines whether the collection contains a specific value.
    </summary>
    <param name="value">The value to search for in the collection.</param>
    <remarks>
      The <c>Contains</c> method checks whether the collection contains a value that matches the provided
      <paramref name="value"/>.
    </remarks>
    <returns>
      <see langword="true"/> if the slot map contains the specified value; otherwise, <see langword="false"/>.
    </returns>
  </SVCContains>

  <SVCCopyTo>
    <summary>
      Copies the elements of the value collection to an array, starting at the specified index.
    </summary>
    <param name="array">The destination array where values will be copied.</param>
    <param name="index">The zero-based index in the array at which copying begins.</param>
    <remarks>
      The <c>CopyTo</c> method copies the values from the value collection to the specified <paramref name="array"/>.
      The copying starts at the specified <paramref name="index"/> in the destination array.
      The destination array must have enough space to accommodate the elements to be copied.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="array"/> is null.
    </exception>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="index"/> is negative, greater than or equal to the length of <paramref name="array"/>,
      or if there are not enough elements in the slot map to fill the destination array starting at the specified index.
    </exception>
  </SVCCopyTo>

  <SVCEnumerator>
    <summary>
      Represents an enumerator for the values in the <see cref="SlotValueCollection"/>
    </summary>
    <remarks>
      The <c>Enumerator</c> struct represents an enumerator for values in the <see cref="SlotValueCollection"/>.
      It allows you to iterate through the values in the collection.
    </remarks>
  </SVCEnumerator>
</docs>
