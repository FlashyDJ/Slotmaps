<?xml version="1.0" encoding="utf-8"?>
<docs>
  <SlotMap>
    <summary>
      Represents a collection that maps <see cref="SlotKey"/> to values of type <typeparamref name="TValue"/>.
    </summary>
    <typeparam name="TValue">The type of values stored in the map.</typeparam>
    <remarks>
      <para>
        The <c>SlotMap</c> class provides a collection that associates keys of type <c>SlotKey</c> with values of type <typeparamref name="TValue"/>.
        It is designed to efficiently manage and access values by their associated keys while allowing for easy addition and removal of entries.
      </para>
      <para>
        This collection can grow dynamically as elements are added and it manages its internal memory allocation to optimize performance.
      </para>
    </remarks>
  </SlotMap>

  <Ctor1>
    <summary>
      Initializes a new instance of the <c>SlotMap</c> class with an empty collection.
    </summary>
    <remarks>
      Use this constructor to create a new <c>SlotMap</c> with no elements initially.
      The <c>SlotMap</c> will be empty, and its internal storage will be an empty array.
    </remarks>
  </Ctor1>

  <Ctor2>
    <summary>
      Initializes a new instance of the <c>SlotMap</c> class with the specified capacity.
    </summary>
    <param name="capacity">
      The initial capacity of the <c>SlotMap</c>. Must be a non-negative integer.
    </param>
    <remarks>
      Use this constructor to create a new <c>SlotMap</c> with a specific initial capacity.
      The <paramref name="capacity"/> parameter determines the maximum number of elements the <c>SlotMap</c> can hold before resizing its internal storage.
    </remarks>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
  </Ctor2>

  <Capacity>
    <summary>
      Gets the capacity of the <c>SlotMap</c>.
    </summary>
    <remarks>
      The capacity represents the maximum number of elements that the <c>SlotMap</c> can hold before it needs to resize its internal storage.
    </remarks>
  </Capacity>

  <Count>
    <summary>
      Gets the number of elements currently stored in the <c>SlotMap</c>.
    </summary>
  </Count>

  <IsEmpty>
    <summary>
      Gets a value indicating whether the <c>SlotMap</c> is empty.
    </summary>
    <remarks>
      The <c>IsEmpty</c> property returns <see langword="true"/> if the <c>SlotMap</c> contains no elements, and <see langword="false"/> otherwise.
    </remarks>
  </IsEmpty>

  <Keys>
    <summary>
      Gets a collection of keys in the <c>SlotMap</c>.
    </summary>
    <remarks>
      The <c>Keys</c> property returns a collection of all the keys present in the <c>SlotMap</c>.
      You can use this collection to iterate through the keys associated with the values in the map.
    </remarks>
  </Keys>

  <Values>
    <summary>
      Gets a collection of values in the <c>SlotMap</c>.
    </summary>
    <remarks>
      The <c>Values</c> property returns a collection of all the values stored in the <c>SlotMap</c>.
      You can use this collection to iterate through the values associated with the keys in the map.
    </remarks>
  </Values>

  <Indexer>
    <summary>
      Gets or sets the value associated with the specified <see cref="SlotKey"/>.
    </summary>
    <param name="key">
      The <see cref="SlotKey"/> for which to get or set the associated value.
    </param>
    <value>
      The value associated with the specified <paramref name="key"/>.
    </value>
    <exception cref="KeyNotFoundException">
      Thrown if the <paramref name="key"/> is not found in the <c>SlotMap</c>.
    </exception>
    <remarks>
      Use this indexer to access the value associated with a specific <see cref="SlotKey"/> in the <c>SlotMap</c>.
      If the <paramref name="key"/> is not found in the map during the get operation, a <c>KeyNotFoundException</c> is thrown.
      To set the value associated with a <paramref name="key"/>, assign a new value to this indexer.
    </remarks>
  </Indexer>

  <Add>
    <summary>
      Adds a value to the <c>SlotMap</c> and returns the associated <see cref="SlotKey"/>.
    </summary>
    <param name="value">
      The value to be added to the <c>SlotMap</c>. Must not be null.
    </param>
    <remarks>
      <para>
        The <c>Add</c> method adds the specified <paramref name="value"/> to the <c>SlotMap</c>.
        It assigns the value to an available slot if one is available; otherwise, it expands the internal storage to accommodate the new value.
      </para>
      <para>
        The <paramref name="value"/> parameter must not be null; otherwise, an <see cref="ArgumentNullException"/> is thrown.
      </para>
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="value"/> is null.
    </exception>
    <returns>
      The <see cref="SlotKey"/> associated with the added value.
    </returns>
  </Add>

  <ContainsKey>
    <summary>
      Determines whether the <c>SlotMap</c> contains the specified <see cref="SlotKey"/>.
    </summary>
    <param name="key">
      The <see cref="SlotKey"/> to check for existence in the <c>SlotMap</c>.
    </param>
    <remarks>
      Use this method to check if a specific <paramref name="key"/> exists in the <c>SlotMap</c>.
      A <paramref name="key"/> is considered to exist if its <see cref="SlotKey.Index"/> is within the valid range of slots
      (0 to the capacity of the map) and the corresponding slot has the same version as the provided <paramref name="key"/>.
    </remarks>
    <returns>
      <see langword="true"/> if the <c>SlotMap</c> contains the specified <paramref name="key"/> and the associated slot has the same version;
      otherwise, <see langword="false"/>.
    </returns>
  </ContainsKey>

  <ContainsValue>
    <summary>
      Determines whether the <c>SlotMap</c> contains a specific value.
    </summary>
    <param name="value">
      The value to locate in the <c>SlotMap</c>. Can be <c>null</c>.
    </param>
    <remarks>
      The <c>ContainsValue</c> method searches the <c>SlotMap</c> for the presence of a specified value.
      If the value is found and is not <see langword="null"/>, the method returns <see langword="true"/>.
      If the value is <see langword="null"/> or not found in the <c>SlotMap</c>, the method returns <see langword="false"/>.
    </remarks>
    <returns>
      <see langword="true"/> if the <c>SlotMap</c> contains an element with the specified value; otherwise, <see langword="false"/>.
    </returns>
  </ContainsValue>

  <Clear>
    <summary>
      Removes all elements from the <c>SlotMap</c>.
    </summary>
    <remarks>
      The <c>Clear</c> method removes all elements from the <c>SlotMap</c>, resetting it to an empty state.
      It also resets the internal counters and clears the values stored in the <see cref="Slot{T}"/>, but it does not deallocate memory.
      Use this method to clear the <c>SlotMap</c> when you want to reuse it without resizing its internal storage.
    </remarks>
  </Clear>

  <Drain>
    <summary>
      Removes and returns elements from the <c>SlotMap</c> one at a time as an enumerable collection of key-value pairs.
    </summary>
    <remarks>
      The <c>Drain</c> method iterates through the elements in the <c>SlotMap</c>, removes each element one at a time, and yields them as key-value pairs.
      Each key-value pair consists of a <see cref="SlotKey"/> and its associated value.
    </remarks>
    <returns>
      An enumerable collection of key-value pairs representing the elements removed from the <c>SlotMap</c>.
    </returns>
  </Drain>

  <EnsureCapacity>
    <summary>
      Ensures that the <c>SlotMap</c> can hold at least the specified capacity without resizing.
    </summary>
    <param name="capacity">The desired capacity. Must be a non-negative integer.</param>
    <remarks>
      Use this method to ensure that the <c>SlotMap</c> can hold at least the specified <paramref name="capacity"/> without resizing its internal storage.
      If the current capacity is less than the specified <paramref name="capacity"/>, the method will resize the internal storage to meet or exceed the desired capacity.
    </remarks>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
    <returns>
      The capacity of the <c>SlotMap</c> after ensuring it can accommodate the specified capacity.
      If the current capacity is already greater than or equal to the specified capacity, the current capacity is returned.
    </returns>
  </EnsureCapacity>

  <Get>
    <summary>
      Gets the value associated with the specified <see cref="SlotKey"/>.
    </summary>
    <param name="key">
      The <see cref="SlotKey"/> to look up in the <c>SlotMap</c>.
    </param>
    <remarks>
      Use this method to retrieve the value associated with a specific <paramref name="key"/> in the <c>SlotMap</c>.
      If the <paramref name="key"/> is not found in the map, a <see cref="KeyNotFoundException"/> is thrown.
    </remarks>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the map.
    </exception>
    <returns>
      The value associated with the <paramref name="key"/>.
    </returns>
  </Get>

  <Insert>
    <summary>
      Inserts a value into the <c>SlotMap</c> associated with the specified <paramref name="key"/>.
    </summary>
    <param name="key">The key at which to insert the value.</param>
    <param name="value">
      The value to insert into the <c>SlotMap</c>.
    </param>
    <remarks>
      Use the <c>Insert</c> method to associate a new value with an existing <paramref name="key"/> in the <c>SlotMap</c>.
      If the <paramref name="key"/> does not exist in the map, a <see cref="KeyNotFoundException"/> is thrown.
      If the <paramref name="key"/> exists, the associated value is updated, and the key's version number is incremented.
      If the <paramref name="key"/> is not associated with a value, its version number is incremented, and the <c>Count</c> property is increased by one.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="value"/> is <c>null</c>.
    </exception>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> does not exist in the <c>SlotMap</c>.
    </exception>
    <returns>
      The updated <paramref name="key"/> with an incremented version number.
    </returns>
  </Insert>

  <Remove>
    <summary>
      Removes the value associated with the specified <paramref name="key"/> from the <c>SlotMap</c>.
    </summary>
    <param name="key">
      The <c>SlotKey</c> associated with the value to be removed.
    </param>
    <remarks>
      Use this method to remove the value associated with the given <paramref name="key"/> from the <c>SlotMap</c>.
      If the specified <paramref name="key"/> is not found in the map, a <see cref="KeyNotFoundException"/> is thrown.
      After removal, the slot corresponding to the <paramref name="key"/> is marked as free for future use.
    </remarks>
    <exception cref="KeyNotFoundException">
      Thrown if the <paramref name="key"/> is not found in the map.
    </exception>
    <returns>The removed value.</returns>
  </Remove>

  <Reserve>
    <summary>
      Increases the capacity of the <c>SlotMap</c> by a specified amount.
    </summary>
    <param name="additionalSize">The additional capacity to reserve. Must be a positive integer.</param>
    <remarks>
      Use this method to increase the capacity of the <c>SlotMap</c> by the specified <paramref name="additionalSize"/>.
      It ensures that the <c>SlotMap</c> can hold at least the current count of elements plus the additional capacity without resizing frequently.
    </remarks>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="additionalSize"/> is non-positive.
    </exception>
  </Reserve>

  <Resize>
    <summary>
      Resizes the internal storage of the <c>SlotMap</c> to the specified new size.
    </summary>
    <param name="newSize">The new size to which the internal storage should be resized. Must be greater than or equal to the current capacity.</param>
    <remarks>
      Use this method to adjust the size of the internal storage of the <c>SlotMap</c> if needed.
      The <paramref name="newSize"/> parameter should be greater than or equal to the current capacity of the <c>SlotMap</c>.
      If the <paramref name="newSize"/> is equal to the current capacity, no resizing occurs, and the method returns immediately.
    </remarks>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="newSize"/> is less than the current capacity.
    </exception>
  </Resize>

  <Retain>
    <summary>
      Retains elements in the <c>SlotMap</c> based on a specified condition defined by a predicate function.
    </summary>
    <param name="predicate">A delegate that defines the condition for retaining elements.</param>
    <remarks>
      The <c>Retain</c> method iterates through all elements in the <c>SlotMap</c> and retains those elements for which the provided predicate function returns <see langword="true"/>.
      Elements that do not satisfy the condition defined by the predicate are removed from the <c>SlotMap</c>.
    </remarks>
    <seealso cref="Remove"/>
  </Retain>

  <TryAdd>
    <summary>
      Tries to add or update an element in the <c>SlotMap</c> with the specified key and value.
    </summary>
    <param name="key">The key to associate with the value.</param>
    <param name="value">
      The value to add or update in the <c>SlotMap</c>.
    </param>
    <param name="newKey">When the method succeeds, this parameter receives the new or updated key associated with the value.</param>
    <remarks>
      Use this method to add a new element to the <c>SlotMap</c> with the specified <paramref name="key"/> and <paramref name="value"/>.
      If the element with the same key already exists, it updates the value associated with that key.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="value"/> is <c>null</c>.
    </exception>
    <returns>
      <see langword="true"/> if the element was added or updated successfully; otherwise, <see langword="false"/>.
    </returns>
  </TryAdd>

  <TryGet>
    <summary>
      Tries to retrieve the value associated with the specified <paramref name="key"/> from the <c>SlotMap</c>.
    </summary>
    <param name="key">The key whose associated value is to be retrieved.</param>
    <param name="value">
      When this method returns, contains the value associated with the specified <paramref name="key"/>,
      if the key is found; otherwise, the default value for <typeparamref name="TValue"/>.
    </param>
    <remarks>
      Use this method to check if the <paramref name="key"/> exists in the <c>SlotMap</c>.
      If the <paramref name="key"/> is found, the associated value is stored in the <paramref name="value"/> parameter,
      and the method returns <see langword="true"/> to indicate success. If the <paramref name="key"/> is not found,
      the <paramref name="value"/> parameter is set to the default value for <typeparamref name="TValue"/>,
      and the method returns <see langword="false"/> to indicate that the key does not exist in the <c>SlotMap</c>.
    </remarks>
    <returns>
      <see langword="true"/> if the <paramref name="key"/> is found in the <c>SlotMap</c>; otherwise, <see langword="false"/>.
    </returns>
  </TryGet>

  <TryRemove>
    <summary>
      Attempts to remove the value associated with the specified <paramref name="key"/> from the <c>SlotMap</c>.
    </summary>
    <param name="key">
      The <c>SlotKey</c> to remove from the <c>SlotMap</c>.
    </param>
    <param name="value">
      When this method returns, contains the value associated with the specified <paramref name="key"/>, if found; otherwise, the default value for <typeparamref name="TValue"/>.
    </param>
    <remarks>
      The <c>TryRemove</c> method attempts to remove the value associated with the specified <paramref name="key"/> from the <c>SlotMap</c>.
      If the <paramref name="key"/> is not found in the map, this method sets the <paramref name="value"/> parameter to the default value of <typeparamref name="TValue"/> and returns <see langword="false"/>.
      If the <paramref name="key"/> is found, it returns <see langword="true"/>, and the associated value is stored in the <paramref name="value"/> parameter.
      In either case, the key-value pair is removed from the map.
    </remarks>
    <returns>
      <see langword="true"/> if the <paramref name="key"/> was found and the associated value was successfully removed;
      otherwise, <see langword="false"/>.
    </returns>
  </TryRemove>

  <Enumerator>
    <summary>
      Represents an enumerator for the <c>SlotMap</c> collection.
    </summary>
    <remarks>
      <para>
        The <c>Enumerator</c> struct provides an enumerator for iterating through the elements of the <c>SlotMap</c> collection.
        It allows sequential access to the key-value pairs within the map.
      </para>
      <para>
        You can use this enumerator to iterate through the elements in the <c>SlotMap</c> using a <c>foreach</c> loop.
      </para>
    </remarks>
  </Enumerator>

  <SlotKeyCollection>
    <summary>
      Represents a collection of <see cref="SlotKey"/> instances associated with a <c>SlotMap</c>.
    </summary>
    <remarks>
      The <c>SlotKeyCollection</c> class provides a collection of <c>SlotKey</c> instances that are associated with a <c>SlotMap</c>.
      This collection allows you to enumerate and work with the keys present in the <c>SlotMap</c>.
    </remarks>
  </SlotKeyCollection>

  <SKCCtor>
    <summary>
      Initializes a new instance of the <c>SlotKeyCollection</c> class with a reference to the parent <c>SlotMap</c>.
    </summary>
    <param name="slotMap">
      The <c>SlotMap</c> to which this collection is associated.
    </param>
    <remarks>
      Use this constructor to create a new <c>SlotKeyCollection</c> that is associated with a specific <c>SlotMap</c>.
      The <paramref name="slotMap"/> parameter represents the parent <c>SlotMap</c> to which this collection is linked.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="slotMap"/> is null.
    </exception>
  </SKCCtor>

  <SKCCount>
    <summary>
      Gets the number of elements in the <c>SlotKeyCollection</c>.
    </summary>
    <remarks>
      This count corresponds to the number of keys associated with the <c>SlotMap</c> that this collection belongs to.
    </remarks>
  </SKCCount>

  <SKCContains>
    <summary>
      Determines whether the <c>SlotKeyCollection</c> contains a specific <see cref="SlotKey"/>.
    </summary>
    <param name="key">
      The <see cref="SlotKey"/> to locate in the collection.
    </param>
    <remarks>
      Use this method to check whether the <c>SlotKeyCollection</c> contains a specific <c>SlotKey</c> instance.
    </remarks>
    <returns>
      <see langword="true"/> if the <c>SlotKeyCollection</c> contains the specified <paramref name="key"/>; otherwise, <see langword="false"/>.
    </returns>
  </SKCContains>

  <SKCCopyTo>
    <summary>
      Copies the elements of the <c>SlotKeyCollection</c> to an array, starting at the specified index.
    </summary>
    <param name="array">
      The one-dimensional array that is the destination of the elements copied from the <c>SlotKeyCollection</c>. Must not be null.
    </param>
    <param name="index">
      The zero-based index in <paramref name="array"/> at which copying begins.
    </param>
    <remarks>
      The <c>CopyTo</c> method copies the elements of the <c>SlotKeyCollection</c> to a one-dimensional array, starting at the specified index in the destination array.
      The destination array must have enough space to accommodate the elements to be copied.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="array"/> is null.
    </exception>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="index"/> is negative, greater than or equal to the length of <paramref name="array"/>, or if there are not enough elements in the <c>SlotKeyCollection</c> to fill the destination array starting at the specified index.
    </exception>
  </SKCCopyTo>

  <SKCEnumerator>
    <summary>
      Represents an enumerator for the <see cref="SlotKeyCollection"/>.
    </summary>
    <remarks>
      The <c>Enumerator</c> struct allows you to enumerate the <c>SlotKey</c> instances in the <see cref="SlotKeyCollection"/>.
      Use this enumerator to iterate over the keys in the collection.
    </remarks>
  </SKCEnumerator>

  <SlotValueCollection>
    <summary>
      Represents a collection of values associated with a <c>SlotMap</c>.
    </summary>
    <remarks>
      The <c>SlotValueCollection</c> class provides a collection of values that are associated with a <c>SlotMap</c>.
      This collection allows you to enumerate and work with the values present in the <c>SlotMap</c>.
    </remarks>
  </SlotValueCollection>

  <SVCCtor>
    <summary>
      Initializes a new instance of the <c>SlotValueCollection</c> class associated with a <c>SlotMap</c>.
    </summary>
    <param name="slotMap">
      The <c>SlotMap</c> with which this collection is associated. Must not be null.
    </param>
    <remarks>
      The constructor initializes a new instance of the <c>SlotValueCollection</c> class that is associated with a specific <c>SlotMap</c>.
      The <paramref name="slotMap"/> parameter determines the <c>SlotMap</c> with which this collection is associated.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="slotMap"/> is null.
    </exception>
  </SVCCtor>

  <SVCCount>
    <summary>
      Gets the number of values in the <c>SlotValueCollection</c>.
    </summary>
    <remarks>
      This count corresponds to the number of values associated with the <c>SlotMap</c> that this collection belongs to.
    </remarks>
  </SVCCount>

  <SVCContains>
    <summary>
      Determines whether the <c>SlotValueCollection</c> contains a specific value.
    </summary>
    <param name="value">The value to locate in the collection.</param>
    <remarks>
      Use this method to check whether the <c>SlotKeyCollection</c> contains a specific value.
    </remarks>
    <returns>
      <see langword="true"/> if the <c>SlotValueCollection</c> contains the specified value; otherwise, <see langword="false"/>.
    </returns>
  </SVCContains>

  <SVCCopyTo>
    <summary>
      Copies the elements of the <c>SlotValueCollection</c> to an array, starting at the specified index.
    </summary>
    <param name="array">
      The one-dimensional array that is the destination of the elements copied from the <c>SlotValueCollection</c>. Must not be null.
    </param>
    <param name="index">
      The zero-based index in <paramref name="array"/> at which copying begins.
    </param>
    <remarks>
      The <c>CopyTo</c> method copies the elements of the <c>SlotValueCollection</c> to a one-dimensional array, starting at the specified index in the destination array.
      The destination array must have enough space to accommodate the elements to be copied.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="array"/> is null.
    </exception>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="index"/> is negative, greater than or equal to the length of <paramref name="array"/>, or if there are not enough elements in the <c>SlotValueCollection</c> to fill the destination array starting at the specified index.
    </exception>
  </SVCCopyTo>

  <SVCEnumerator>
    <summary>
      Represents an enumerator for the values in the <c>SlotValueCollection</c>.
    </summary>
    <remarks>
      The <c>Enumerator</c> struct allows you to enumerate the values stored in the <see cref="SlotValueCollection"/>.
      Use this enumerator to iterate over the values in the collection.
    </remarks>
  </SVCEnumerator>
</docs>