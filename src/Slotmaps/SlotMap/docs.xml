<?xml version="1.0" encoding="utf-8"?>
<docs>
  <SlotMapSlotKey>
    <summary>
      Represents a slot map data structure that associates keys of type <see cref="SlotKey"/>
      with values of type <typeparamref name="TValue"/>.
    </summary>
    <typeparam name="TValue">The type of values stored in the slot map.</typeparam>
    <remarks>
      <para>
        This class provides an implementation of <see cref="SlotMap{TKey, TValue}"/> that uses <see cref="SlotKey"/>
        as the key type. If you don't need a custom key type, you can use this class for convenience.
      </para>
      <para>
        If you require a custom key type, consider using the more generic <see cref="SlotMap{TKey, TValue}"/>
        class where you can specify your own key type implementing <see cref="ISlotKey{TKey}"/>.
      </para>
    </remarks>
    <seealso cref="SlotMap{TKey, TValue}"/>
  </SlotMapSlotKey>

  <SlotMapSlotKeyCtor1>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TValue}"/> class that is empty with no initial capacity.
    </summary>
  </SlotMapSlotKeyCtor1>

  <SlotMapSlotKeyCtor2>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TValue}"/> class with
      the specified capacity.
    </summary>
    <param name="capacity">The initial capacity of the slot map. Must be a non-negative integer.</param>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
  </SlotMapSlotKeyCtor2>

  <SlotMap>
    <summary>
      Represents a slot map data structure that associates keys of type <typeparamref name="TKey"/>
      with values of type <typeparamref name="TValue"/>.
    </summary>
    <typeparam name="TKey">
      The type of keys that implement <see cref="ISlotKey{TKey}"/>.
    </typeparam>
    <typeparam name="TValue">The type of values stored in the slot map.</typeparam>
    <remarks>
      <para>
        The <see cref="SlotMap{TKey, TValue}"/> class is a versatile data structure designed for
        efficient association of keys with values. It is particularly useful when you need to manage
        a large number of items with a stable key-value relationship and when keys must adhere to the
        <see cref="ISlotKey{TKey}"/> interface.
      </para>
      <para>
        The slot map optimizes memory usage by storing values in an array of slots and associating each
        value with a key. It also manages slot reuse and reallocation to ensure efficient storage.
      </para>
      <para>
        To use this class effectively, ensure that your key type <typeparamref name="TKey"/> implements
        the <see cref="ISlotKey{TKey}"/> interface, providing the necessary methods for slot-based management.
      </para>
      <para>
        If you don't require a custom key type, you can use <see cref="SlotMap{TValue}"/>. This class
        automatically sets the key type to <see cref="SlotKey"/>, simplifying slot-based key management
        and allowing you to focus on value association and efficient data management.
      </para>
    </remarks>
    <seealso cref="SlotMap{TValue}"/>
  </SlotMap>

  <Ctor1>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TKey, TValue}"/> class that is empty with no initial capacity.
    </summary>
  </Ctor1>

  <Ctor2>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TKey, TValue}"/> class with
      the specified capacity.
    </summary>
    <param name="capacity">The initial capacity of the slot map. Must be a non-negative integer.</param>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
  </Ctor2>

  <Capacity>
    <summary>
      Gets the capacity of the slot map.
    </summary>
    <remarks>
      The capacity represents the maximum number of elements that the slot map can hold before it needs to resize its internal storage.
    </remarks>
  </Capacity>

  <Count>
    <summary>
      Gets the number of elements currently stored in the slot map.
    </summary>
  </Count>

  <IsEmpty>
    <summary>Indicates whether the slot map is empty.</summary>
    <remarks>
      The <c>IsEmpty</c> property returns <see langword="true"/> if the slot map contains no elements, and <see langword="false"/> otherwise.
    </remarks>
  </IsEmpty>

  <Keys>
    <summary>
      Gets a collection of keys associated with the values in the slot map.
    </summary>
    <remarks>
      The <see cref="Keys"/> property returns a <see cref="SlotKeyCollection"/> that provides a read-only
      collection of keys associated with the values in the <see cref="SlotMap{TKey, TValue}"/>. Use this
      collection to enumerate, search, or perform operations on the keys within the slot map.
    </remarks>
    <seealso cref="SlotKeyCollection"/>
  </Keys>

  <Values>
    <summary>
      Gets a collection of values stored in the slot map.
    </summary>
    <remarks>
      The <see cref="Values"/> property returns a <see cref="SlotValueCollection"/> that provides a read-only
      collection of values stored in the <see cref="SlotMap{TKey, TValue}"/>. Use this collection to enumerate,
      search, or perform operations on the values within the slot map.
    </remarks>
    <seealso cref="SlotValueCollection"/>
  </Values>

  <Indexer>
    <summary>
      Gets or sets the value associated with the specified key.
    </summary>
    <param name="key">The key to retrieve or set the value for.</param>
    <value>The value associated with the specified key.</value>
    <remarks>
      The <see cref="this[TKey]"/> property provides a convenient way to access and set values in the
      slot map using their associated keys. To retrieve a value, provide the key as an indexer. To set a
      value, use an assignment operation.
    </remarks>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the slot map.
    </exception>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add a value
        SlotKey key = slotMap.Add("Hello, World!");

        // Retrieve the value using the key
        string value = slotMap[key];

        // Set a new value for the same key
        slotMap[key] = "Updated Value";
      </code>
    </example>
  </Indexer>

  <Add>
    <summary>
      Adds a value to the slot map and returns a key associated with the added value. It assigns the value
      to an available slot if one is available; otherwise, it expands the internal storage to accommodate the new value.
    </summary>
    <param name="value">The value to be added to the slot map. Must not be null.</param>
    <remarks>
      <para>
        The <c>Add</c> method adds a value to the slot map while ensuring that the key-value relationship
        remains stable and consistent. It assigns a unique key to the added value, which is returned as
        the result of the method.
      </para>
      <para>
        The slot map maintains an array of slots to store values. When adding a value, it checks for available
        slots and assigns the value to an unoccupied slot if one is available. If no available slot exists,
        the slot map may automatically resize to accommodate additional values.
      </para>
    </remarks>
    <returns>The key associated with the added value.</returns>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="value"/> is null.
    </exception>
    <example>
      <code>
        // Create a SlotMap with the default key type.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add a value
        SlotKey key = slotMap.Add("Hello, World!");
      </code>
    </example>
  </Add>

  <ContainsKey>
    <summary>
      Determines whether the slot map contains a key that matches the specified <paramref name="key"/>.
    </summary>
    <param name="key">The key to search for in the slot map.</param>
    <remarks>
      The <see cref="ContainsKey"/> method checks whether the slot map contains a key that matches
      the provided <paramref name="key"/>. It verifies both the existence of the key and its associated
      version in the slot map to ensure consistency.
    </remarks>
    <returns>
      <see langword="true"/> if the slot map contains the specified key; otherwise, <see langword="false"/>.
    </returns>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add a value
        SlotKey key = slotMap.Add("Hello, World!");

        // Check if the key exists in the slot map
        bool containsKey = slotMap.ContainsKey(key);
      </code>
    </example>
  </ContainsKey>

  <ContainsValue>
    <summary>
      Determines whether the slot map contains a value that matches the specified <paramref name="value"/>.
    </summary>
    <param name="value">The value to search for in the slot map.</param>
    <remarks>
      <para>
        The <see cref="ContainsValue"/> method checks whether the slot map contains a value that matches
        the provided <paramref name="value"/>. It iterates through the slots, searching for an occupied
        slot with a value that equals the specified value using the default equality comparer.
      </para>
      <para>
        If <paramref name="value"/> is <see langword="null"/>, the method returns <see langword="false"/>
        since it cannot match a <see langword="null"/> value.
      </para>
    </remarks>
    <returns>
      <see langword="true"/> if the slot map contains the specified value; otherwise, <see langword="false"/>.
    </returns>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add a value
        SlotKey key = slotMap.Add("Hello, World!");

        // Check if the value exists in the slot map
        bool containsValue = slotMap.ContainsValue("Hello, World!");
      </code>
    </example>
  </ContainsValue>

  <Clear>
    <summary>
      Removes all values from the slot map, resetting it to an empty state.
    </summary>
    <remarks>
      The <see cref="Clear"/> method removes all keys and values from the slot map, effectively resetting it
      to an empty state. If the slot map contains any items, this method clears the internal slots array and
      resets the count and free head to zero, but it does not deallocate memory.
    </remarks>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add some values to the slot map.
        SlotKey key1 = slotMap.Add("Value 1");
        SlotKey key2 = slotMap.Add("Value 2");

        // Clear the slot map.
        slotMap.Clear();
      </code>
    </example>
  </Clear>

  <Drain>
    <summary>
      Empties the slot map by returning key-value pairs one by one while leaving the remaining items in the map.
    </summary>
    <remarks>
      The <see cref="Drain"/> method returns an enumerable sequence of key-value pairs stored in the slot map
      one by one, allowing you to process or stop processing at any point while the remaining items remain
      in the slot map.
    </remarks>
    <returns>
      An enumerable sequence of key-value pairs drained from the slot map.
    </returns>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add some values to the slot map.
        SlotKey key1 = slotMap.Add("Value 1");
        SlotKey key2 = slotMap.Add("Value 2");

        // Drain the slot map, processing key-value pairs one by one.
        foreach (var pair in slotMap.Drain())
        {
        // Process the pair
        Console.WriteLine($"Key: {pair.Key}, Value: {pair.Value}");

        // Optionally stop processing
        if (conditionMet)
        break;
        }
      </code>
    </example>
    <seealso cref="Clear"/>
  </Drain>

  <EnsureCapacity>
    <summary>
      Ensures that the slot map can hold at least the specified capacity without resizing.
    </summary>
    <param name="capacity">The desired capacity. Must be a non-negative integer.</param>
    <remarks>
      The <see cref="EnsureCapacity"/> method ensures that the slot map can hold at least the specified
      <paramref name="capacity"/> without resizing its internal storage. If the current capacity is less
      than the specified <paramref name="capacity"/>, the method will resize the internal storage to meet
      or exceed the desired capacity.
    </remarks>
    <returns>The actual capacity of the slot map after ensuring it meets the specified capacity.</returns>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="capacity"/> is negative.
    </exception>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Ensure a minimum capacity of 10.
        int ensuredCapacity = slotMap.EnsureCapacity(10);
      </code>
    </example>
  </EnsureCapacity>

  <Get>
    <summary>
      Gets the value associated with the specified key in the slot map.
    </summary>
    <param name="key">The key to retrieve the value for.</param>
    <remarks>
      The <see cref="Get"/> method retrieves the value associated with the specified key in the slot map.
      If the key is not found in the slot map, it throws a <see cref="KeyNotFoundException"/>.
    </remarks>
    <returns>The value associated with the specified key.</returns>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the slot map.
    </exception>
    <example>
      <code>
        // Create a SlotMap with custom keys and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add a value
        SlotKey key = slotMap.Add("Hello, World!");

        // Retrieve the value using the key
        string value = slotMap.Get(key);
      </code>
    </example>
    <seealso cref="TryGet"/>
  </Get>

  <Insert>
    <summary>
      Inserts or updates a value associated with the specified key in the slot map.
    </summary>
    <param name="key">The key to insert or update the value for.</param>
    <param name="value">The value to insert or update.</param>
    <remarks>
      The <see cref="Insert"/> method inserts or updates a value associated with the specified <paramref name="key"/>
      in the slot map. It verifies the existence of the key, updates the value, and increments the version of the slot.
    </remarks>
    <returns>
      The updated key after the insertion or update with an incremented version number.
    </returns>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="value"/> is <c>null</c>.
    </exception>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the slot map.
    </exception>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add a value with a key
        SlotKey key = slotMap.Add("Value 1");

        // Update the value associated with the key
        SlotKey updatedKey = slotMap.Insert(key, "Updated Value 1");
      </code>
    </example>
    <seealso cref="TryInsert"/>
  </Insert>

  <Remove>
    <summary>
      Removes the value associated with the specified key from the slot map.
    </summary>
    <param name="key">The key to remove from the slot map.</param>
    <remarks>
      The <see cref="Remove"/> method removes the value associated with the specified <paramref name="key"/>
      from the slot map. It verifies the existence of the key, clears the value, updates the slot's next free
      index, increments the version of the slot, and updates the count. After removal, the slot corresponding
      to the <paramref name="key"/> is marked as free for future use.
    </remarks>
    <returns>The removed value.</returns>
    <exception cref="KeyNotFoundException">
      Thrown if the specified <paramref name="key"/> is not found in the slot map.
    </exception>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add a value with a key
        SlotKey key = slotMap.Add("Value 1");

        // Remove the value associated with the key
        string removedValue = slotMap.Remove(key);
      </code>
    </example>
    <seealso cref="TryRemove"/>
  </Remove>

  <Reserve>
    <summary>
      Ensures that the slot map has enough additional capacity to accommodate the specified number of elements.
    </summary>
    <param name="additionalSize">The additional capacity to reserve. Must be a positive integer.</param>
    <remarks>
      The <see cref="Reserve"/> method ensures that the slot map has enough additional capacity to accommodate
      the specified number of elements. If the remaining available capacity is less than <paramref name="additionalSize"/>,
      it resizes the internal slots array to increase the capacity.
    </remarks>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="additionalSize"/> is negative or zero.
    </exception>
    <example>
      <code>
        // Create a SlotMap with custom keys and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Reserve additional capacity for 10 elements.
        slotMap.Reserve(10);
      </code>
    </example>
    <seealso cref="Capacity"/>
  </Reserve>

  <Resize>
    <summary>
      Resizes the slot map to the specified new size.
    </summary>
    <param name="newSize">The new size for the slot map. Must be greater than or equal to the current capacity.</param>
    <remarks>
      The <see cref="Resize"/> method resizes the slot map to the specified new size while preserving existing elements.
      If <paramref name="newSize"/> is equal to the current capacity, the method has no effect. If <paramref name="newSize"/>
      is greater than the current capacity, it increases the capacity. If <paramref name="newSize"/> is less than the current capacity,
      the method throws an <see cref="ArgumentOutOfRangeException"/>.
    </remarks>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="newSize"/> is less than the current capacity.
    </exception>
    <example>
      <code>
        // Create a SlotMap with custom keys and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Resize the slot map to a new size.
        slotMap.Resize(100);
      </code>
    </example>
  </Resize>

  <Retain>
    <summary>
      Retains elements in the slot map based on a specified predicate.
    </summary>
    <param name="predicate">A function that defines whether to retain or remove an element based on its key and value.</param>
    <remarks>
      The <see cref="Retain"/> method iterates through the elements in the slot map and retains those for which the
      specified <paramref name="predicate"/> function returns <see langword="true"/>. It removes elements for which the predicate
      returns <see langword="false"/>. This method is useful for filtering elements based on custom criteria.
    </remarks>
    <seealso cref="Remove"/>
  </Retain>

  <TryInsert>
    <summary>
      Tries to insert or update a value associated with the specified key in the slot map.
    </summary>
    <param name="key">The key to insert or update the value for.</param>
    <param name="value">The value to insert or update.</param>
    <param name="newKey">When this method returns, contains the updated key if insertion or update was successful.</param>
    <remarks>
      The <see cref="TryInsert"/> method tries to insert or update a value associated with the specified <paramref name="key"/>
      in the slot map. If the key is not found in the slot map, the method returns <see langword="false"/>, and <paramref name="newKey"/>
      is set to <see cref="ISlotKey{TSelf}.Null()"/>. If the insertion or update was successful, <see langword="true"/> is returned, and
      <paramref name="newKey"/> containsthe updated key.
    </remarks>
    <returns>
      <see langword="true"/> if insertion or update was successful; otherwise, <see langword="false"/>.
    </returns>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="value"/> is <c>null</c>.
    </exception>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string="">();

        // Try to insert or update a value with a key
        SlotKey key = slotMap.Add("Value 1");
        bool success = slotMap.TryInsert(key, "Updated Value 1", out var newKey);
      </code>
    </example>
  </TryInsert>

  <TryGet>
    <summary>
      Tries to retrieve the value associated with the specified key from the slot map.
    </summary>
    <param name="key">The key to retrieve the value for.</param>
    <param name="value">
      When this method returns, contains the value associated with the specified key if found; otherwise, the default value.
    </param>
    <remarks>
      The <see cref="TryGet"/> method tries to retrieve the value associated with the specified <paramref name="key"/>
      from the slot map. If the key is not found in the slot map, the method returns <see langword="false"/>, and <paramref name="value"/>
      is set to the default value for the value type. If the value is found, <see langword="true"/> is returned, and <paramref name="value"/>
      contains the retrieved value.
    </remarks>
    <returns>
      <see langword="true"/> if the value associated with the specified key was found; otherwise, <see langword="false"/>.
    </returns>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string="">();

        // Add a value with a key
        MyKey key = slotMap.Add("Value 1");
        string retrievedValue;
        bool success = slotMap.TryGet(key, out retrievedValue);
      </code>
    </example>
  </TryGet>

  <TryRemove>
    <summary>
      Tries to remove the value associated with the specified key from the slot map.
    </summary>
    <param name="key">The key to remove from the slot map.</param>
    <param name="value">
      When this method returns, contains the value associated with the removed key if found; otherwise, the default value.
    </param>
    <remarks>
      The <see cref="TryRemove"/> method tries to remove the value associated with the specified <paramref name="key"/>
      from the slot map. If the key is not found in the slot map, the method returns <see langword="false"/>, and
      <paramref name="value"/> is set to the default value for the value type. If the value is found and removed,
      <see langword="true"/> is returned, and <paramref name="value"/> contains the removed value.
    </remarks>
    <returns>
      <see langword="true"/> if the value associated with the specified key was found and removed; otherwise, <see langword="false"/>.
    </returns>
    <example>
      <code>
        // Create a SlotMap with the default key type and values.
        var slotMap = new SlotMap{SlotKey, string}();

        // Add a value with a key
        SlotKey key = slotMap.Add("Value 1");
        bool success = slotMap.TryRemove(key, out var removedValue);
      </code>
    </example>
  </TryRemove>

  <Enumerator>
    <summary>
      Represents an enumerator for the <see cref="SlotMap{TValue}"/> collection.
    </summary>
    <remarks>
      <para>
        The <c>Enumerator</c> struct provides an enumerator for iterating through the elements of the <see cref="SlotMap{TValue}"/> collection.
        It allows sequential access to the key-value pairs within the map.
      </para>
      <para>
        You can use this enumerator to iterate through the elements in the <see cref="SlotMap{TValue}"/> using a <c>foreach</c> loop.
      </para>
    </remarks>
  </Enumerator>

  <SlotKeyCollection>
    <summary>
      Represents a collection of <see cref="SlotKey"/> instances associated with a <see cref="SlotMap{TValue}"/>.
    </summary>
    <remarks>
      The <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> class provides a collection of <see cref="SlotKey"/> instances that are associated with a <see cref="SlotMap{TValue}"/>.
      This collection allows you to enumerate and work with the keys present in the <see cref="SlotMap{TValue}"/>.
    </remarks>
  </SlotKeyCollection>

  <SKCCtor>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> class with a reference to the parent <see cref="SlotMap{TValue}"/>.
    </summary>
    <param name="slotMap">
      The <see cref="SlotMap{TValue}"/> to which this collection is associated.
    </param>
    <remarks>
      Use this constructor to create a new <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> that is associated with a specific <see cref="SlotMap{TValue}"/>.
      The <paramref name="slotMap"/> parameter represents the parent <see cref="SlotMap{TValue}"/> to which this collection is linked.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="slotMap"/> is null.
    </exception>
  </SKCCtor>

  <SKCCount>
    <summary>
      Gets the number of elements in the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c>.
    </summary>
    <remarks>
      This count corresponds to the number of keys associated with the <see cref="SlotMap{TValue}"/> that this collection belongs to.
    </remarks>
  </SKCCount>

  <SKCContains>
    <summary>
      Determines whether the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> contains a specific <see cref="SlotKey"/>.
    </summary>
    <param name="key">
      The <see cref="SlotKey"/> to locate in the collection.
    </param>
    <remarks>
      Use this method to check whether the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> contains a specific <see cref="SlotKey"/> instance.
    </remarks>
    <returns>
      <see langword="true"/> if the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> contains the specified <paramref name="key"/>; otherwise, <see langword="false"/>.
    </returns>
  </SKCContains>

  <SKCCopyTo>
    <summary>
      Copies the elements of the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> to an array, starting at the specified index.
    </summary>
    <param name="array">
      The one-dimensional array that is the destination of the elements copied from the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c>. Must not be null.
    </param>
    <param name="index">
      The zero-based index in <paramref name="array"/> at which copying begins.
    </param>
    <remarks>
      The <c>CopyTo</c> method copies the elements of the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> to a one-dimensional array, starting at the specified index in the destination array.
      The destination array must have enough space to accommodate the elements to be copied.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="array"/> is null.
    </exception>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="index"/> is negative, greater than or equal to the length of <paramref name="array"/>, or if there are not enough elements in the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> to fill the destination array starting at the specified index.
    </exception>
  </SKCCopyTo>

  <SKCEnumerator>
    <summary>
      Represents an enumerator for the <see cref="SlotKeyCollection"/>.
    </summary>
    <remarks>
      The <c>Enumerator</c> struct allows you to enumerate the <see cref="SlotKey"/> instances in the <see cref="SlotKeyCollection"/>.
      Use this enumerator to iterate over the keys in the collection.
    </remarks>
  </SKCEnumerator>

  <SlotValueCollection>
    <summary>
      Represents a collection of values associated with a <see cref="SlotMap{TValue}"/>.
    </summary>
    <remarks>
      The <see cref="SlotMap{TValue}.SlotValueCollection"/>/c> class provides a collection of values that are associated with a <see cref="SlotMap{TValue}"/>.
      This collection allows you to enumerate and work with the values present in the <see cref="SlotMap{TValue}"/>.
    </remarks>
  </SlotValueCollection>

  <SVCCtor>
    <summary>
      Initializes a new instance of the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c> class associated with a <see cref="SlotMap{TValue}"/>.
    </summary>
    <param name="slotMap">
      The <see cref="SlotMap{TValue}"/> with which this collection is associated. Must not be null.
    </param>
    <remarks>
      The constructor initializes a new instance of the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c> class that is associated with a specific <see cref="SlotMap{TValue}"/>.
      The <paramref name="slotMap"/> parameter determines the <see cref="SlotMap{TValue}"/> with which this collection is associated.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="slotMap"/> is null.
    </exception>
  </SVCCtor>

  <SVCCount>
    <summary>
      Gets the number of values in the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c>.
    </summary>
    <remarks>
      This count corresponds to the number of values associated with the <see cref="SlotMap{TValue}"/> that this collection belongs to.
    </remarks>
  </SVCCount>

  <SVCContains>
    <summary>
      Determines whether the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c> contains a specific value.
    </summary>
    <param name="value">The value to locate in the collection.</param>
    <remarks>
      Use this method to check whether the <see cref="SlotMap{TValue}.SlotKeyCollection"/>/c> contains a specific value.
    </remarks>
    <returns>
      <see langword="true"/> if the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c> contains the specified value; otherwise, <see langword="false"/>.
    </returns>
  </SVCContains>

  <SVCCopyTo>
    <summary>
      Copies the elements of the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c> to an array, starting at the specified index.
    </summary>
    <param name="array">
      The one-dimensional array that is the destination of the elements copied from the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c>. Must not be null.
    </param>
    <param name="index">
      The zero-based index in <paramref name="array"/> at which copying begins.
    </param>
    <remarks>
      The <c>CopyTo</c> method copies the elements of the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c> to a one-dimensional array, starting at the specified index in the destination array.
      The destination array must have enough space to accommodate the elements to be copied.
    </remarks>
    <exception cref="ArgumentNullException">
      Thrown if <paramref name="array"/> is null.
    </exception>
    <exception cref="ArgumentOutOfRangeException">
      Thrown if <paramref name="index"/> is negative, greater than or equal to the length of <paramref name="array"/>, or if there are not enough elements in the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c> to fill the destination array starting at the specified index.
    </exception>
  </SVCCopyTo>

  <SVCEnumerator>
    <summary>
      Represents an enumerator for the values in the <see cref="SlotMap{TValue}.SlotValueCollection"/>/c>.
    </summary>
    <remarks>
      The <c>Enumerator</c> struct allows you to enumerate the values stored in the <see cref="SlotValueCollection"/>.
      Use this enumerator to iterate over the values in the collection.
    </remarks>
  </SVCEnumerator>
</docs>
