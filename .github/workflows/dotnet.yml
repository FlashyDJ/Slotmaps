# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: .NET

on:
  push:
    branches: [main]
    paths:
    - src/**
    - tests/**
    - .github/workflows/dotnet.yml
  pull_request:
    paths:
    - src/**
    - tests/**
    - .github/workflows/dotnet.yml
  workflow_dispatch:

env:
  dotnet_version: 8.x
  ResultsDirectory: ${{github.workspace}}/results
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.dotnet_version}}

      - name: Install dependencies
        run: dotnet restore

      - name: Build FlashyDJ.Slotmaps
        run: dotnet build src/Slotmaps/Slotmaps.csproj -c ${{matrix.configuration}} --no-restore

  run-tests:
    name: Run XUnit Tests
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.dotnet_version}}

      - name: Install dependencies
        run: dotnet restore

      - name: Test Slotmaps.Tests
        run: >
          dotnet test tests/Slotmaps.Tests/Slotmaps.Tests.csproj 
          -c ${{matrix.configuration}} 
          -l "trx;logfilename=Slotmaps.Tests(${{matrix.configuration}}).trx" 
          --results-directory ${{env.ResultsDirectory}} 
          --no-restore

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results (${{matrix.configuration}})
          retention-days: 2
          path: ${{env.ResultsDirectory}} 

  publish-results:
    needs: run-tests
    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write

    strategy:
      matrix:
        configuration: [Debug, Release]

    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{env.ResultsDirectory}}

      - name: Publish Test Results (${{matrix.configuration}})
        id: test-results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "${{env.ResultsDirectory}}/**/*(${{matrix.configuration}}).trx"

      - name: Parse Test Results
        id: parse_test
        shell: pwsh
        run: |
          $conclusion = "${{fromJSON(steps.test-results.outputs.json).conclusion}}"
          $BADGE_COLOR = 696969

          switch ($conclusion) {
            "success" {
              $BADGE_COLOR = 31c653
            }
            "failure" {
              $BADGE_COLOR = 800000
            }
          }

          echo "::set-output name=BADGE_COLOR::$BADGE_COLOR"
          echo "::set-output name=PASS_TESTS::${{fromJSON(steps.test-results.outputs.json).formatted.stats.tests_succ}}"
          echo "::set-output name=TOTAL_TESTS::${{fromJSON(steps.test-results.outputs.json).formatted.stats.tests}}"

      - name: Create Test Badge
        if: >
          github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main' ||
          github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{secrets.GIST_TOKEN}}
          gistID: 4f6ab220575cb9ef573ec7b05d0cc8b4
          filename: test(${{matrix.configuration}}).json
          label: 'Test (${{matrix.configuration}}): ${{steps.parse_test.outputs.PASS_TESTS}}/${{steps.parse_test.outputs.TOTAL_TESTS}}'
          message: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests'
          color: ${{steps.parse_test.outputs.BADGE_COLOR}}

