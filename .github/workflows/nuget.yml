# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: NuGet

on:
  create:
  push:
    branches: [release/**]
  pull_request:
  workflow_dispatch:

env:
  dotnet_version: 8.x
  NuGetDirectory: ${{github.workspace}}/nuget
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

defaults:
  run:
    shell: pwsh

jobs:
  create-nuget:
      runs-on: ubuntu-latest

      steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Install dependencies
        run: dotnet restore
  
      - name: Pack FlashyDJ.Slotmaps
        run: dotnet pack -c Release --output ${{env.NuGetDirectory}} --no-restore
  
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{env.NuGetDirectory}}/*.nupkg

  validate-nuget:
    needs: create-nuget
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup .NET 8
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.dotnet_version}}
  
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: nuget
        path: ${{env.NuGetDirectory}}
  
    - name: Install NuGet Validator
      run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global
  
    - name: Validate Package
      run: |
        meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg") --excluded-rules IconMustBeSet
        echo ${{github.ref}}
  
  deploy:
    if: ${{ startsWith(github.ref, 'refs/heads/release') }}
    needs: validate-nuget

    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{env.NuGetDirectory}}
  
      - name: Setup NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-api-key: ${{secrets.NUGET_SLOTMAPS_TOKEN}}

      - name: Get Version
        id: get_version
        run: |
          $VERSION = Get-Content "build/VERSION"
          $IS_PRERELEASE = "false"
          if ($file_text -match "alpha|beta|rc|preview") {
            $IS_PRERELEASE = "true"
          }

          echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $env:GITHUB_OUTPUT
  
      # - name: Build Changelog
      #   id: github_release
      #   uses: mikepenz/release-changelog-builder-action@v1
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{env.NuGetDirectory}}/*
          body: ${{steps.github_release.outputs.changelog}}
          tag: "v${{steps.get_version.outputs.VERSION}}"
          token: ${{secrets.GITHUB_TOKEN}}
          prerelease: "${{steps.get_version.outputs.IS_PRERELEASE}}"
  
      - name: Publish to NuGet
        shell: pwsh
        run: |
          $files = Get-ChildItem ${{env.NuGetDirectory}} -Filter *.nupkg
          foreach ($file in $files) {
            nuget push $file ${{secrets.NUGET_SLOTMAPS_TOKEN}} -src https://api.nuget.org/v3/index.json
          }
      
      - name: Publish to Github Packages
        shell: pwsh
        run: |
          $files = Get-ChildItem ${{env.NuGetDirectory}} -Filter *.nupkg
          foreach ($file in $files) {
            nuget push $file ${{secrets.GITHUB_TOKEN}} -src https://nuget.pkg.github.com/flashydj/index.json
          }
          